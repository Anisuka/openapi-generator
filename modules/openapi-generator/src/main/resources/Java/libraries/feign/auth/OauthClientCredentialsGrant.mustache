package {{invokerPackage}}.auth;

import com.github.scribejava.core.builder.ServiceBuilder;
import com.github.scribejava.core.model.OAuth2AccessToken;
import java.security.interfaces.RSAPrivateKey;

{{>generatedAnnotation}}
public class OauthClientCredentialsGrant extends OAuth {

  public OauthClientCredentialsGrant(String authorizationUrl, String tokenUrl, String scopes) {
    super(authorizationUrl, tokenUrl, scopes);
  }

  @Override
  protected OAuth2AccessToken getOAuth2AccessToken() {
    try {
      String scopeValue = scopes != null && !scopes.isBlank() ? scopes : null;
      return service.getAccessTokenClientCredentialsGrant(scopeValue);
    } catch (Exception e) {
      throw new RuntimeException("Failed to get oauth token", e);
    }
  }

  @Override
  protected OAuthFlow getFlow() {
    return OAuthFlow.APPLICATION;
  }

  /**
   * Configures the client credentials flow
   *
   * @param clientId
   * @param clientSecret
   */
  public void configure(String clientId, String clientSecret) {
    ServiceBuilder serviceBuilder = new ServiceBuilder(clientId).apiSecret(clientSecret);
    if (scopes != null && !scopes.isBlank()){
       service = serviceBuilder.build(new DefaultApi20Impl(authorizationUrl, tokenUrl));
    } else {
       service = serviceBuilder.defaultScope(scopes)
            .build(new DefaultApi20Impl(authorizationUrl, tokenUrl));
    }
  }

    public void configure(String clientId, String clientSecret, String customScopes) {
      ServiceBuilder serviceBuilder = new ServiceBuilder(clientId).apiSecret(clientSecret);
      if (customScopes != null && !customScopes.isBlank()){
         service = serviceBuilder.defaultScope(customScopes).build(new DefaultApi20Impl(authorizationUrl, tokenUrl));
      } else {
         service = serviceBuilder.build(new DefaultApi20Impl(authorizationUrl, tokenUrl));
      }
    }

    /**
     * Configures the client credentials flow
     *
     * @param clientId
     * @param clientSecret
     */
    public void configure(String clientId, String keyId, RSAPrivateKey privateKey) {
      ServiceBuilder serviceBuilder = new ServiceBuilder(clientId)
              .apiSecret(clientId);
      if (scopes != null && !scopes.isBlank()){
         service = serviceBuilder.defaultScope(scopes).build(new DefaultApi20Impl(authorizationUrl, tokenUrl, privateKey, keyId));
      } else {
         service = serviceBuilder.build(new DefaultApi20Impl(authorizationUrl, tokenUrl, privateKey, keyId));
      }
    }

    public void configure(String clientId, String keyId, RSAPrivateKey privateKey, String customScopes) {
      ServiceBuilder serviceBuilder = new ServiceBuilder(clientId)
              .apiSecret(clientId);
      if (customScopes != null && !customScopes.isBlank()){
         service = serviceBuilder.defaultScope(customScopes).build(new DefaultApi20Impl(authorizationUrl, tokenUrl, privateKey, keyId));
      } else {
         service = serviceBuilder.build(new DefaultApi20Impl(authorizationUrl, tokenUrl, privateKey, keyId));
      }
    }
}
